#version 130

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform vec3 attenuation;//1 for each light


uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

const float levels = 3.0;

void main(void){
	
	
	
	vec3 unitNormal = normalize(surfaceNormal);
	
	float distance = length(toLightVector);
	float attFactor = attenuation.x + (attenuation.y*distance) + (attenuation.z * distance*distance); 
	vec3 unitLightVector = normalize(toLightVector);
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl,0.0);
	
	//float level = floor(brightness*levels);
	//brightness = level/levels;
	vec3 totalDiffuse =  (brightness*lightColor)/attFactor;
	
	
	vec3 unitVectorToCamera = normalize(toCameraVector);

	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	
	float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
	specularFactor = max(specularFactor,0.2);
	float dampedFactor = pow(specularFactor,shineDamper);
	// level = floor(dampedFactor*levels);
	//dampedFactor = level/levels;
	vec3 totalSpecular = (dampedFactor*lightColor*reflectivity)/attFactor;
	
	
	
	totalDiffuse = max(totalDiffuse,0.2);
	
	vec4 textureColor =  texture2D(textureSampler,pass_textureCoords);
	if(textureColor.a<0.5){
	discard;
	}
	
	out_Color =vec4(totalDiffuse,1.0)* texture2D(textureSampler,pass_textureCoords) + vec4(totalSpecular,1.0);
	out_Color = mix(vec4(skyColor,1.0),out_Color,visibility);
}